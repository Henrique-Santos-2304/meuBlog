"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Contact {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  metaDescription: ComponentSectionMetaTagsAndIcons
  input: [ComponentSectionInputs]
  button: [ComponentSectionButtons]
  linkWhats: ComponentSectionLinksSocials
  published_at: DateTime
}

input ContactInput {
  title: String!
  metaDescription: ComponentSectionMetaTagsAndIconInput
  input: [ComponentSectionInputInput]
  button: [ComponentSectionButtonInput]
  linkWhats: ComponentSectionLinksSocialInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContactInput {
  title: String
  metaDescription: editComponentSectionMetaTagsAndIconInput
  input: [editComponentSectionInputInput]
  button: [editComponentSectionButtonInput]
  linkWhats: editComponentSectionLinksSocialInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateContactInput {
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

type deleteContactPayload {
  contact: Contact
}

type Footer {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String!
  ariaLabel: String
  text: String
  linkSocial: [ComponentSectionLinksSocials]
  published_at: DateTime
}

input FooterInput {
  createdBy: String!
  ariaLabel: String
  text: String
  linkSocial: [ComponentSectionLinksSocialInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFooterInput {
  createdBy: String
  ariaLabel: String
  text: String
  linkSocial: [editComponentSectionLinksSocialInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateFooterInput {
  data: editFooterInput
}

type updateFooterPayload {
  footer: Footer
}

type deleteFooterPayload {
  footer: Footer
}

type Header {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  menu: ComponentSectionMenu
  link: [ComponentSectionMenuLink]
  metaDescription: ComponentSectionMetaTagsAndIcons
  published_at: DateTime
}

input HeaderInput {
  title: String
  menu: ComponentSectionMenuInput
  link: [ComponentSectionMenuLinkInput!]
  metaDescription: ComponentSectionMetaTagsAndIconInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHeaderInput {
  title: String
  menu: editComponentSectionMenuInput
  link: [editComponentSectionMenuLinkInput]
  metaDescription: editComponentSectionMetaTagsAndIconInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateHeaderInput {
  data: editHeaderInput
}

type updateHeaderPayload {
  header: Header
}

type deleteHeaderPayload {
  header: Header
}

type Home {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  boxMain: ComponentSectionBoxMain
  userImage: ComponentSectionUserImage
  metaTagsIcons: ComponentSectionMetaTagsAndIcons
  published_at: DateTime
}

input HomeInput {
  title: String
  boxMain: ComponentSectionBoxMainInput
  userImage: ComponentSectionUserImageInput
  metaTagsIcons: ComponentSectionMetaTagsAndIconInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHomeInput {
  title: String
  boxMain: editComponentSectionBoxMainInput
  userImage: editComponentSectionUserImageInput
  metaTagsIcons: editComponentSectionMetaTagsAndIconInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateHomeInput {
  data: editHomeInput
}

type updateHomePayload {
  home: Home
}

type deleteHomePayload {
  home: Home
}

type ProjectsPreview {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  sectionProjectPreview: ComponentSectionSectionProjectPreview
  cardSlides: [ComponentSectionCardSlides]
  metaDescription: ComponentSectionMetaTagsAndIcons
  published_at: DateTime
}

input ProjectsPreviewInput {
  sectionProjectPreview: ComponentSectionSectionProjectPreviewInput
  cardSlides: [ComponentSectionCardSlideInput!]
  metaDescription: ComponentSectionMetaTagsAndIconInput!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProjectsPreviewInput {
  sectionProjectPreview: editComponentSectionSectionProjectPreviewInput
  cardSlides: [editComponentSectionCardSlideInput]
  metaDescription: editComponentSectionMetaTagsAndIconInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateProjectsPreviewInput {
  data: editProjectsPreviewInput
}

type updateProjectsPreviewPayload {
  projectsPreview: ProjectsPreview
}

type deleteProjectsPreviewPayload {
  projectsPreview: ProjectsPreview
}

type SectionHabilities {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  skilss: ComponentSectionSkilssSections
  published_at: DateTime
}

input SectionHabilityInput {
  skilss: ComponentSectionSkilssSectionInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSectionHabilityInput {
  skilss: editComponentSectionSkilssSectionInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateSectionHabilityInput {
  data: editSectionHabilityInput
}

type updateSectionHabilityPayload {
  sectionHability: SectionHabilities
}

type deleteSectionHabilityPayload {
  sectionHability: SectionHabilities
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentSectionBoxMain {
  id: ID!
  _id: ID!
  name: String!
  profission: String!
  platform: String!
  linksSocials: [ComponentSectionLinksSocials]
}

input ComponentSectionBoxMainInput {
  name: String!
  profission: String!
  platform: String!
  linksSocials: [ComponentSectionLinksSocialInput]
}

input editComponentSectionBoxMainInput {
  id: ID
  name: String
  profission: String
  platform: String
  linksSocials: [editComponentSectionLinksSocialInput]
}

type ComponentSectionButtons {
  id: ID!
  _id: ID!
  label: String!
  url: String
  icon: UploadFile
  ariaLabel: String
}

input ComponentSectionButtonInput {
  label: String!
  url: String
  icon: ID
  ariaLabel: String
}

input editComponentSectionButtonInput {
  id: ID
  label: String
  url: String
  icon: ID
  ariaLabel: String
}

type ComponentSectionCardBoxSkilss {
  id: ID!
  _id: ID!
  title: String!
  ariaLabel: String
  iconSkill: UploadFile
}

input ComponentSectionCardBoxSkilssInput {
  title: String!
  ariaLabel: String
  iconSkill: ID
}

input editComponentSectionCardBoxSkilssInput {
  id: ID
  title: String
  ariaLabel: String
  iconSkill: ID
}

type ComponentSectionCardSlides {
  id: ID!
  _id: ID!
  title: String!
  miniDescription: String!
  buttons: [ComponentSectionButtons]
  imageFront: ComponentSectionUserImage
}

input ComponentSectionCardSlideInput {
  title: String!
  miniDescription: String!
  buttons: [ComponentSectionButtonInput!]
  imageFront: ComponentSectionUserImageInput!
}

input editComponentSectionCardSlideInput {
  id: ID
  title: String
  miniDescription: String
  buttons: [editComponentSectionButtonInput]
  imageFront: editComponentSectionUserImageInput
}

type ComponentSectionInputs {
  id: ID!
  _id: ID!
  label: String!
  placeholder: String!
  img: UploadFile
  ariaLabel: String
}

input ComponentSectionInputInput {
  label: String!
  placeholder: String!
  img: ID
  ariaLabel: String
}

input editComponentSectionInputInput {
  id: ID
  label: String
  placeholder: String
  img: ID
  ariaLabel: String
}

type ComponentSectionLinksSocials {
  id: ID!
  _id: ID!
  title: String!
  url: String
  imageIcon: UploadFile
}

input ComponentSectionLinksSocialInput {
  title: String!
  url: String
  imageIcon: ID
}

input editComponentSectionLinksSocialInput {
  id: ID
  title: String
  url: String
  imageIcon: ID
}

type ComponentSectionLogo {
  id: ID!
  _id: ID!
  preText: String!
  proText: String!
  imgLogo: UploadFile
  url: String
}

input ComponentSectionLogoInput {
  preText: String!
  proText: String!
  imgLogo: ID
  url: String
}

input editComponentSectionLogoInput {
  id: ID
  preText: String
  proText: String
  imgLogo: ID
  url: String
}

type ComponentSectionMenuLink {
  id: ID!
  _id: ID!
  title: String!
  url: String
  iconNavigation: UploadFile
  name: String
}

input ComponentSectionMenuLinkInput {
  title: String!
  url: String
  iconNavigation: ID
  name: String
}

input editComponentSectionMenuLinkInput {
  id: ID
  title: String
  url: String
  iconNavigation: ID
  name: String
}

type ComponentSectionMenu {
  id: ID!
  _id: ID!
  openMenu: String!
  closeMenu: String
  ariaLabelOpenMenu: String
  ariaLabelCloseMenu: String
  iconMenu(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
}

input ComponentSectionMenuInput {
  openMenu: String!
  closeMenu: String
  ariaLabelOpenMenu: String
  ariaLabelCloseMenu: String
  iconMenu: [ID]
}

input editComponentSectionMenuInput {
  id: ID
  openMenu: String
  closeMenu: String
  ariaLabelOpenMenu: String
  ariaLabelCloseMenu: String
  iconMenu: [ID]
}

type ComponentSectionMetaTagsAndIcons {
  id: ID!
  _id: ID!
  metaDescription: String!
  titlePage: String!
  newMetaTag: String
  extrametaTags: String
  iconPage(sort: String, limit: Int, start: Int, where: JSON): [UploadFile!]!
}

input ComponentSectionMetaTagsAndIconInput {
  metaDescription: String!
  titlePage: String!
  iconPage: [ID]
  newMetaTag: String
  extrametaTags: String
}

input editComponentSectionMetaTagsAndIconInput {
  id: ID
  metaDescription: String
  titlePage: String
  iconPage: [ID]
  newMetaTag: String
  extrametaTags: String
}

type ComponentSectionSectionProjectPreview {
  id: ID!
  _id: ID!
  title: String!
}

input ComponentSectionSectionProjectPreviewInput {
  title: String!
}

input editComponentSectionSectionProjectPreviewInput {
  id: ID
  title: String
}

type ComponentSectionSkilssSections {
  id: ID!
  _id: ID!
  title: String!
  cardBoxSkilss: [ComponentSectionCardBoxSkilss]
  metaDescription: ComponentSectionMetaTagsAndIcons
}

input ComponentSectionSkilssSectionInput {
  title: String!
  cardBoxSkilss: [ComponentSectionCardBoxSkilssInput]
  metaDescription: ComponentSectionMetaTagsAndIconInput!
}

input editComponentSectionSkilssSectionInput {
  id: ID
  title: String
  cardBoxSkilss: [editComponentSectionCardBoxSkilssInput]
  metaDescription: editComponentSectionMetaTagsAndIconInput
}

type ComponentSectionUserImage {
  id: ID!
  _id: ID!
  alt: String
  ariaLabel: String!
  imageUser: UploadFile
}

input ComponentSectionUserImageInput {
  alt: String
  ariaLabel: String!
  imageUser: ID
}

input editComponentSectionUserImageInput {
  id: ID
  alt: String
  ariaLabel: String
  imageUser: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Contact | updateContactPayload | deleteContactPayload | Footer | updateFooterPayload | deleteFooterPayload | Header | updateHeaderPayload | deleteHeaderPayload | Home | updateHomePayload | deleteHomePayload | ProjectsPreview | updateProjectsPreviewPayload | deleteProjectsPreviewPayload | SectionHabilities | updateSectionHabilityPayload | deleteSectionHabilityPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentSectionBoxMain | ComponentSectionButtons | ComponentSectionCardBoxSkilss | ComponentSectionCardSlides | ComponentSectionInputs | ComponentSectionLinksSocials | ComponentSectionLogo | ComponentSectionMenuLink | ComponentSectionMenu | ComponentSectionMetaTagsAndIcons | ComponentSectionSectionProjectPreview | ComponentSectionSkilssSections | ComponentSectionUserImage

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  contact(publicationState: PublicationState): Contact
  footer(publicationState: PublicationState): Footer
  header(publicationState: PublicationState): Header
  home(publicationState: PublicationState): Home
  projectsPreview(publicationState: PublicationState): ProjectsPreview
  sectionHability(publicationState: PublicationState): SectionHabilities
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact: deleteContactPayload
  updateFooter(input: updateFooterInput): updateFooterPayload
  deleteFooter: deleteFooterPayload
  updateHeader(input: updateHeaderInput): updateHeaderPayload
  deleteHeader: deleteHeaderPayload
  updateHome(input: updateHomeInput): updateHomePayload
  deleteHome: deleteHomePayload
  updateProjectsPreview(input: updateProjectsPreviewInput): updateProjectsPreviewPayload
  deleteProjectsPreview: deleteProjectsPreviewPayload
  updateSectionHability(input: updateSectionHabilityInput): updateSectionHabilityPayload
  deleteSectionHability: deleteSectionHabilityPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
